#!/usr/bin/env node
const debug = require('debug')('server');
const debugLr = require('debug')('tinylr');
const info = require('chalk').magenta;
const path = require('path');


/**
 * Handle command line arguments.
 */
const args = require('command-line-args')([
  {name: 'root', type: String, defaultOption: true},
  {name: 'notFound', alias: 'f', type: String},
  {name: 'help', alias: 'h', type: Boolean}
]);

if (args.help) {
  console.log(`
    Usage: server [options] <root>

    Options:
      -f, --notFound [file]       Provide a custom 404 page.
      -h, --help                  View this message.
  `)
  process.exit();
}

if (!args.root) {
  throw new Error('Usage: the root argument is required.');
  process.exit(1);
}

/**
 * This is the directory from which we'll be serving files.
 */
const ROOT = path.join(require('find-root')(), args.root);

/**
 * Watch root directory for changes, do livereload.
 *
 * See https://github.com/mklabs/tiny-lr
 * See https://github.com/paulmillr/chokidar
 */

debugLr('watching directory %s for changes', info(ROOT));
const tinylr = require('tiny-lr')();
const watcher = require('chokidar').watch(ROOT);
const LR_PORT = 35729;

function changed(action) {
  return filepath => {
    let servedPath = path.relative(ROOT, filepath);
    debugLr('file %s has %s.', info(servedPath), action);
    tinylr.changed({body: {files: servedPath}});
  }
}

tinylr.listen(LR_PORT, () => {
  console.log('Livereload server listening on port %s', info(LR_PORT))
});

watcher.on('change', changed('changed'));
watcher.on('add', changed('been added'));
watcher.on('unlink', changed('been removed'));


/**
 * Static file server.
 *
 * See https://github.com/expressjs/express
 */
const express = require('express');
const onFinished = require('on-finished');
const server = express();
const PORT = 8000;

server.use((req, res, next) => {
  onFinished(res, () => {
    debug('%d: %s - %s', res.statusCode || 0, info(req.method), req.originalUrl || req.url);
  });
  next();
});

server.use(express.static(ROOT));

// Support custom 404 page.
if (args.notFound) {
  server.use((req, res) => {
    res.status(404);

    res.format({
      html: () => res.sendFile(args.notFound, {root: ROOT}),
      json: () => res.json({error: 'Not found'}),
      default: () => res.type('txt').send('Not found')
    });
  });
}

server.listen(PORT, () => {
  console.log('Static server listening on port: %s', info(PORT));
});
